rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is an Admin
    function isAdmin() {
      // Check if user exists and has the Admin role
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Admin';
    }

    // --- Rules for 'users' collection ---
    match /users/{userId} {
      // An admin can read any user document. A user can only read their own.
      allow read: if request.auth.uid == userId || isAdmin();
      // Only an authenticated user can create their own user document, with a server timestamp.
      allow create: if request.auth.uid == userId && request.resource.data.createdAt == request.time;
      // Only admins can update user roles.
      allow update: if isAdmin();
    }
    
    // --- Rules for 'projects' collection ---
    match /projects/{projectId} {
      // Anyone can read projects (for the portfolio).
      allow read: if true;
      // Only admins can create, update, or delete projects. Creation requires a server timestamp.
      allow create: if isAdmin() && request.resource.data.createdAt == request.time;
      allow update, delete: if isAdmin();
    }

    // --- Rules for 'requests' collection ---
    match /requests/{requestId} {
      // A user can create a request for themselves, using a server timestamp.
      allow create: if request.auth.uid == request.resource.data.userId && request.resource.data.createdAt == request.time;
      // A user can read their own requests. Admins can read all requests.
      allow read: if request.auth.uid == resource.data.userId || isAdmin();
      // Only admins can update the status of a request.
      allow update: if isAdmin();
      // No one can delete requests.
      allow delete: if false;
    }
    
    // --- Rules for 'messageThreads' collection ---
    match /messageThreads/{threadId} {
      // A user can create a message thread for themselves, using a server timestamp.
      allow create: if request.auth.uid == request.resource.data.userId &&
                       request.resource.data.createdAt == request.time;
                       
      // A user can read their own threads. Admins can read all threads.
      allow read: if request.auth.uid == resource.data.userId || isAdmin();
      
      // A user can update their own thread (add a message). Admins can update any thread.
      // The update must include a server timestamp for the last message.
      allow update: if (request.auth.uid == resource.data.userId || isAdmin()) &&
                       request.resource.data.lastMessageTimestamp == request.time;
    }
  }
}
