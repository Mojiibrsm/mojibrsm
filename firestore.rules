
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isAuth() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
      // Check if the user is authenticated and their document in Firestore has the 'Admin' role.
      return isAuth() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Admin';
    }

    // Users Collection Rules
    match /users/{userId} {
      // Anyone authenticated can create their OWN user document.
      allow create: if isAuth() && isOwner(userId);
      
      // Users can get/update their own document. Admins can get any.
      allow get, update: if isAuth() && (isOwner(userId) || isAdmin());

      // Only admins can list all users.
      allow list: if isAdmin();
      
      // Only admins can delete users.
      allow delete: if isAdmin();
    }

    // Projects Collection Rules
    match /projects/{projectId} {
      // Any authenticated user can view projects (for portfolio).
      allow read: if isAuth();
      
      // Only admins can create, update, or delete projects.
      allow write: if isAdmin();
    }

    // MessageThreads Collection Rules
    match /messageThreads/{threadId} {
      // Users can create threads where they are the owner.
      allow create: if isAuth() && request.resource.data.userId == request.auth.uid;
      
      // Users can read/write to their own threads. Admins can read/write any thread.
      allow read, write: if isAuth() && (resource.data.userId == request.auth.uid || isAdmin());
    }

    // Requests Collection Rules
    match /requests/{requestId} {
      // Users can create requests for themselves.
      allow create: if isAuth() && request.resource.data.userId == request.auth.uid;
      
      // Users can read their own requests. Admins can read any.
      allow read: if isAuth() && (resource.data.userId == request.auth.uid || isAdmin());
      
      // Only admins can update (approve/reject) or delete requests.
      allow update, delete: if isAdmin();
    }
  }
}
